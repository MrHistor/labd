11 bullseye
deb http://ftp.ru.debian.org/debian/ bookworm main

deb http://deb.debian.org/debian bookworm main non-free-firmware
deb-src http://deb.debian.org/debian bookworm main non-free-firmware
deb http://deb.debian.org/debian-security/ bookworm-security main non-free-firmware
deb-src http://deb.debian.org/debian-security/ bookworm-security main non-free-firmware
deb http://deb.debian.org/debian bookworm-updates main non-free-firmware
deb-src http://deb.debian.org/debian bookworm-updates main non-free-firmware

postgresql postgresql-contrib
(sudo nano /etc/postgresql/12/main/postgresql.conf)

/etc/PostgreSQL/.../main/pg_hba.conf ipv4 trust
systemctl restart
(sudo -u postgres psql -c "ALTER USER postgres PASSWORD 'your_new_password';")
su - postgres (root# sudo -u postgres psql)
psql

##Пользователи
CREATE ROLE dev1 WITH LOGIN PASSWORD ‘supersecretpw’; (psql -h localhost -U dev1 -d postgres)
GRANT CREATE ON SCHEMA public TO dev1; (GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO dev1;)
-- Временно переключаем роль в текущей сессии на другую роль.
--Только суперпользователи или члены этой роли могут это сделать.
SET ROLE dev1;
-- Создаем таблицу под dev1, которой даны новые разрешения
CREATE TABLE user_social (
   user_id INT NOT NULL,
   twitter_handle TEXT NULL,
   facebook_handle TEXT NULL );
 -- Возвращаемся к исходной роли сессии
SET ROLE NONE;

##Группы
CREATE ROLE devgrp WITH NOLOGIN;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO devgrp;
GRANT devgrp TO dev1;
CREATE ROLE dev2 WITH LOGIN PASSWORD ‘supersecretpw2’ IN ROLE devgrp;

###HASH
 \i /home/demo-medium20170815.sql
SELECT * FROM tickets LIMIT 10;
ALTER TABLE airports_data ADD COLUMN sha1_hashed TEXT;
CREATE EXTENSION pgcrypto;
UPDATE airports_data SET sha1_hashed = encode(digest(airport_name::text, 'sha1'), 'hex');
SELECT * FROM airports_data LIMIT 10;

GRANT ALL PRIVILEGES ON DATABASE db_name TO username;
\connect db_name – подключиться к базе с именем db_name
\du – список пользователей
\dp (или \z) – список таблиц, представлений, последовательностей, прав доступа к ним
\di – индексы
\ds – последовательности
\dt – список таблиц
\dt+ — список всех таблиц с описанием
\dt *s* — список всех таблиц, содержащих s в имени
\dv – представления
\dS – системные таблицы
\d+ – описание таблицы
\o – пересылка результатов запроса в файл
\l – список баз данных
\i – читать входящие данные из файла
\e – открывает текущее содержимое буфера запроса в редакторе (если иное не указано в окружении переменной EDITOR, то будет использоваться по умолчанию vi)
\d “table_name” – описание таблицы
\i запуск команды из внешнего файла, например \i /my/directory/my.sql
\pset – команда настройки параметров форматирования
\echo – выводит сообщение
\set – устанавливает значение переменной среды. Без параметров выводит список текущих переменных (\unset – удаляет).

CREATE DATABASE db_name; - Создаем БД с названием db_name
CREATE USER abuser WITH PASSWORD 'db_user_pw'; - Создаем пользователя db_user с паролем db_user_pw
GRANT ALL PRIVILEGES ON DATABASE db_name to db_user; - Даем ВСЕ права пользователю db_user на базу db_name
SELECT rolname FROM pg_roles; - Глянуть все роли в базе
SELECT session_user; - Глянуть текущего пользователя, под которым выполняется сеанс

SELECT * FROM pg_stat_activity WHERE state = 'active'; - Получить все выполняемые запросы на сервере
SELECT pg_cancel_backend(<pid of the process>); - kill'яем неугодный процесс
SELECT pg_terminate_backend(<pid of the process>); - если процесс не может быть kill'ен, то пробуем это. Более сильная магия
SELECT pg_size_pretty(pg_database_size(current_database())); - получить красивый размер бд
SELECT pg_relation_size('accounts'); - получить размер конкретной таблицы



##MARIADB##
https://habr.com/ru/articles/564390/
/etc/mysql/mysql.conf.d/mysqld.cnf

mariadb-server
mysql_secure_installation
SHOW DATABASES;
SHOW TABLES;
DESCRIBE books;
SELECT * FROM books;

GRANT ALL ON *.* TO 'admin'@'localhost' IDENTIFIED BY 'password' WITH GRANT OPTION;
FLUSH PRIVILEGES;
show tables;
CREATE TABLE `accounts` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `type_acc` int(11) NOT NULL DEFAULT '0',
  `parent_id` int(11) NOT NULL,
  `name_acc` tinytext NOT NULL,
  `description_acc` tinytext,
  `requisites_acc` text,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 |
DROP TABLE accounts;
CREATE USER UserName IDENTIFIED BY “password”;
GRANT SELECT ON TableName TO UserName;
GRANT INSERT ON TableName TO UserName;
GRANT ALL ON TableName TO UserName;
REVOKE SELECT ON . TO UserName;
CREATE ROLE GroupName;
DROP ROLE GroupName;

SELECT table_schema "DB Name" FROM information_schema.tables GROUP BY table_schema;
